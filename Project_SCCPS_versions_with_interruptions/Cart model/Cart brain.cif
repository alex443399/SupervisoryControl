group def Cart_brain():
    // Moving variables
    controllable start_fw, start_l, start_r, stop_fw;
    uncontrollable stop_l, stop_r;

    // Lifiting event
    controllable start_lifting, start_lowering, interrupt_lift;
    uncontrollable stop_lifting, stop_lowering;

    // Barcode events
    uncontrollable on_barcode_location, off_barcode_location;
//     uncontrollable on_barcode_product, off_barcode_product;

//     Communicator events
    controllable request_storage, request_picking, request_charging;
    uncontrollable granted_storage, granted_picking, granted_charging;
    uncontrollable denied_storage, denied_picking, denied_charging;

    plant last_target_type:
        location none:initial;
            edge granted_storage goto storage;
            edge granted_picking goto picking;
            edge granted_charging goto charging;
        location storage:marked;
            edge granted_storage goto storage;
            edge granted_picking goto picking;
            edge granted_charging goto charging;
        location picking:marked;
            edge granted_storage goto storage;
            edge granted_picking goto picking;
            edge granted_charging goto charging;
        location charging:marked;
            edge granted_storage goto storage;
            edge granted_picking goto picking;
            edge granted_charging goto charging;
    end


    controllable plan_standby, start_planning;
    uncontrollable done_planning;

    controllable executing_on_standby, start_executing; // get the execution on standby and then start
    controllable finish_executing; // This means we are done executing, for whatever reason, and return to idle

    controllable abort, do_not_abort; // We chose if we want to abort path
    uncontrollable final_location, not_final_location; // When we check if we reached the final location,
    // we do not control if we reached or not, hence uncontrollable
    plant current_location:
        location charging:initial; marked;
            edge start_executing goto unknown;
        location picking: marked;
            edge start_executing goto unknown;
        location storage: marked;
            edge start_executing goto unknown;
        location unknown: marked;
            edge abort, start_executing;
            edge final_location when last_target_type.storage goto storage;
            edge final_location when last_target_type.picking goto picking;
            edge final_location when last_target_type.charging goto charging;
    end

//     battery events
    controllable start_charging, stop_charging, replace_battery;
    uncontrollable charge, discharge;

    // picking events (not yet)
//     controllable start_picking, stop_picking;

   // Sensors:
    uncontrollable touch_stimulate, infrared_stimulate;
    uncontrollable infrared_unstimulate, touch_unstimulate;

    // path planner events (not yet)
//     uncontrollable done_planning, final_location, not_final_location;
//     controllable start_planning, abort_route, do_not_abort, start_executing;

    // Emergency handling
    const int max_emergencies = 3; // for the sake of simplicity we chose 3, since that is what we will use, however we
    // could make at an arbitrarily large integer
    controllable add_emergency, fix_emergency;

    plant Emergency_handler:
        disc int[0..max_emergencies] E_count = 0;// Emergency counter
        location No_emergency: initial; marked;
            edge add_emergency do E_count := E_count + 1 goto Emergency;
        location Emergency:
            edge add_emergency when E_count < max_emergencies
                do E_count := E_count + 1;
            edge fix_emergency when E_count > 1
                do E_count := E_count - 1;
            edge fix_emergency when E_count = 1
                do E_count := E_count - 1 goto No_emergency;
    end


    // Interruption handling
    controllable done_handling_interruption;
    plant interrumption_handler:
        location Listening:initial; marked;
            edge
                on_barcode_location, off_barcode_location, // barcode location
                touch_stimulate,touch_unstimulate, // touch
                infrared_stimulate,infrared_unstimulate, // IR
//                 stop_l, stop_r, // DC motor, for simplicity
                charge, discharge // battery
                goto Handling_interruption;
        location Handling_interruption:
            edge done_handling_interruption goto Listening;
            edge add_emergency, fix_emergency;
    end



end
