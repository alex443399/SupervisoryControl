import "Cart model/Cart brain.cif", "Cart model/Cart communicator.cif";
import "Cart model/sensor.cif", "Cart model/DC motor.cif", "Cart model/Lifting_mechanism.cif";
import "Cart model/Battery.cif";
import "PathPlanner.cif";


import "M requirements.cif";
import "P requirements.cif";
import "L requirements.cif";


group def Cart_system():
    brain : Cart_brain();
    motor : DC_motor(brain);
    lift : Lifting_mechanism(brain);
    sensors_and_cameras : Sensor_and_cameras(brain);
//
    battery : Battery(brain, motor);
    comms : CartComm(brain);
//
    pp : PathPlanner(brain, motor);
//
    m0_req : M0(brain);
    m1_req : M1(brain, sensors_and_cameras, motor, lift);
    m2_req : M2(motor, lift);
    m4b_req : M4b(brain);
    m5_req : M5(brain);
    m6_req : M6(brain, battery);
//     m7_req : M7(brain, motor, battery);
//     quality_of_life : QOL(brain, sensors_and_cameras, motor, battery);

    p1_req : P1(brain, pp);
    p2_req : P2(brain, pp);
    p3_req : P3(brain, battery);
//
//     l1_req : L1(brain);
//     l2_req : L2(brain);
    l3_req : L3(brain, pp);
    l4_req : L4(brain, motor, lift, comms);
    l5_req : L5(brain, battery);
//     l6_req : L6(lift, pp);
// //     l7_req : L7(brain);

end

Cart1 : Cart_system();
// Cart2 : Cart_system();

// plant AA_resource_allocator:
//     controllable process;
//     disc int[0..2] q = 0; // 2 carts, 5 max requests, 3 types of requests
//
//     location idle:initial;marked;
//         edge Cart1.brain.request_storage, Cart1.brain.request_picking, Cart1.brain.request_charging
//             do q := q + 1 goto choosing_from_Q;
//         edge Cart2.brain.request_storage, Cart2.brain.request_picking, Cart2.brain.request_charging
//             do q := q + 1 goto choosing_from_Q;
//     location choosing_from_Q:
//         edge process goto processing_request;
//
//         edge Cart1.brain.request_storage, Cart1.brain.request_picking, Cart1.brain.request_charging
//             do q := q + 1;
//         edge Cart2.brain.request_storage, Cart2.brain.request_picking, Cart2.brain.request_charging
//             do q := q + 1;
//     location processing_request:
//         edge Cart1.brain.granted_storage, Cart1.brain.granted_picking, Cart1.brain.granted_charging,
//             Cart1.brain.denied_storage, Cart1.brain.denied_picking, Cart1.brain.denied_charging
//             when q>1 do q:=q-1 goto choosing_from_Q;
//         edge Cart1.brain.granted_storage, Cart1.brain.granted_picking, Cart1.brain.granted_charging,
//             Cart1.brain.denied_storage, Cart1.brain.denied_picking, Cart1.brain.denied_charging
//             when q = 1 do q:=0 goto idle;
//         edge Cart2.brain.granted_storage, Cart2.brain.granted_picking, Cart2.brain.granted_charging,
//             Cart2.brain.denied_storage, Cart2.brain.denied_picking, Cart2.brain.denied_charging
//             when q>1 do q:=q-1 goto choosing_from_Q;
//         edge Cart2.brain.granted_storage, Cart2.brain.granted_picking, Cart2.brain.granted_charging,
//             Cart2.brain.denied_storage, Cart2.brain.denied_picking, Cart2.brain.denied_charging
//             when q = 1 do q:=0 goto idle;
//
//         edge Cart1.brain.request_storage, Cart1.brain.request_picking, Cart1.brain.request_charging
//             do q := q + 1;
//         edge Cart2.brain.request_storage, Cart2.brain.request_picking, Cart2.brain.request_charging
//             do q := q + 1;
// end
