import "Cart model/Cart brain.cif", "Cart model/DC motor.cif", "Cart model/Battery.cif";



group def PathPlanner(Cart_brain brain; DC_motor motor):


    plant is_there_new_location:
        location no_target_available: initial; marked;
            edge brain.granted_storage, brain.granted_picking, brain.granted_charging goto target_available;
        location target_available: marked;
//             edge brain.granted_storage, brain.granted_picking, brain.granted_charging;
            edge brain.finish_executing;
    end

    plant planning_handler:
        location no_plan: initial;
            edge brain.plan_standby goto Standby_Plan;
        location Standby_Plan:
            edge brain.start_planning goto Planning;
        location Planning:
            edge brain.done_planning goto new_plan;
        location new_plan: marked;
            edge brain.plan_standby goto Standby_Plan;
    end

    plant invariant motor.keep_track_of_direction.idle or
        not(execution_handler.idle or execution_handler.Standby_execution or execution_handler.Abort_Prematurely or execution_handler.Check_initial_barcode);

    plant execution_summary:
        location idle: marked; initial;
            edge brain.executing_on_standby goto Standby_execution;
        location Standby_execution:
            edge brain.start_executing goto Executing;
        location Executing: marked;
            edge brain.finish_executing goto idle;
    end

    plant execution_handler:
        // we go on standby and then start
        location idle: initial; marked;
            edge brain.executing_on_standby goto Standby_execution;
            edge brain.done_handling_interruption;
        location Standby_execution:
            edge brain.start_executing goto Abort_Prematurely;
            edge brain.done_handling_interruption;

        // We check the initial barcode, as well as if we want to abort immidiately
        location Abort_Prematurely:
            edge brain.abort, brain.finish_executing goto FinishedPathing;
            edge brain.do_not_abort goto Check_initial_barcode;
            edge brain.done_handling_interruption;
        location Check_initial_barcode:
            edge brain.final_location goto FinishedPathing;
            edge brain.not_final_location goto Pathing;
            edge brain.done_handling_interruption;
        // Every time we see a barcode we consider aborting and check if we reached the final destination
        location Pathing:marked; // there is always the risk that we stay pathing forever
            edge brain.on_barcode_location goto Abort;
            edge brain.done_handling_interruption;
        location Abort:
            edge brain.abort goto finishProcessingInterruption;
            edge brain.do_not_abort goto Check_location;
        location Check_location:
            edge brain.final_location goto finishProcessingInterruption;
            edge brain.not_final_location goto second_finishProcessingInterruption;
        // We synchronize with the interruption handler
        location second_finishProcessingInterruption:
            edge brain.done_handling_interruption goto Pathing;
        location finishProcessingInterruption:
            edge brain.done_handling_interruption goto FinishedPathing;
        // We broadcast to everyone that we are done with the execution
        location FinishedPathing:
            edge brain.done_handling_interruption;
            edge brain.finish_executing goto idle;
    end

end

