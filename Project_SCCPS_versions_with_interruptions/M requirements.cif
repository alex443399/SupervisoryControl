import "Cart model/Cart brain.cif", "Cart model/Cart communicator.cif";
import "Cart model/sensor.cif", "Cart model/DC motor.cif", "Cart model/Battery.cif", "Cart model/Lifting_mechanism.cif"; //, "Cart model/Battery.cif";

requirement def M0(Cart_brain brain):
    location Idle:
        initial;
        marked;
        edge brain.done_handling_interruption goto Idle;
        edge brain.start_fw goto moving_but_has_not_left_barcode;

    location moving_but_has_not_left_barcode:
        edge brain.done_handling_interruption;
        edge brain.off_barcode_location goto left_barcode_processing;

    location left_barcode_processing:
        edge brain.done_handling_interruption goto in_between_barcodes;

    location in_between_barcodes:
        edge brain.done_handling_interruption;
        edge brain.on_barcode_location goto reached_new_barcode;

    location reached_new_barcode:
        edge brain.stop_fw goto Stopped_moving;
    location Stopped_moving:
        edge brain.done_handling_interruption goto Idle;
end

group def M1(Cart_brain brain; Sensor_and_cameras sensors; DC_motor motor; Lifting_mechanism lift; CartComm comms):
    requirement invariant sensors.Location_barcode_sensor.on_top_of_barcode or not(motor.keep_track_of_direction.turning_right);
    requirement invariant sensors.Location_barcode_sensor.on_top_of_barcode or not(motor.keep_track_of_direction.turning_left);
    // For lifting mechanism
    requirement invariant sensors.Location_barcode_sensor.on_top_of_barcode or not(lift.lifting);
    requirement invariant sensors.Location_barcode_sensor.on_top_of_barcode or not(lift.lowering);

    requirement brain.request_storage needs sensors.Location_barcode_sensor.on_top_of_barcode; // atomic actions
    requirement brain.request_picking needs sensors.Location_barcode_sensor.on_top_of_barcode; // atomic actions
    requirement brain.request_charging needs sensors.Location_barcode_sensor.on_top_of_barcode; // atomic actions
end

group def M2(Cart_brain brain; Lifting_mechanism lift):
    requirement brain.start_fw needs not (lift.lifting or lift.lowering);
    requirement brain.start_l needs not (lift.lifting or lift.lowering);
    requirement brain.start_r needs not (lift.lifting or lift.lowering);
end

group def M4b(Cart_brain brain; Sensor_and_cameras sensors; DC_motor motor): // infrared-proximity -> E_stop
    requirement M4_aux_1:
        location Idle:
            initial;
            marked;
            edge brain.add_emergency, brain.fix_emergency, brain.done_handling_interruption;
            edge brain.infrared_stimulate goto Processing;
        location Processing:
            edge brain.add_emergency goto EmergencyAck; //emergency acknowledged
        location EmergencyAck:
            edge brain.done_handling_interruption goto Processed;
        location Processed:
            edge brain.add_emergency, brain.fix_emergency, brain.done_handling_interruption;
            edge brain.infrared_unstimulate goto Resolved;
        location Resolved:
            edge brain.fix_emergency goto EmergencyLifted;
        location EmergencyLifted:
            edge brain.done_handling_interruption goto Idle;
    end
end

group def M5(Cart_brain brain; Sensor_and_cameras sensors; DC_motor motor): // touch -> E_stop
    requirement M5_aux_1:
        location Idle:
            initial;
            marked;
            edge brain.add_emergency, brain.fix_emergency, brain.done_handling_interruption goto Idle;
            edge brain.touch_stimulate goto Processing;
        location Processing:
            edge brain.add_emergency goto EmergencyAck; //emergency acknowledged
        location EmergencyAck:
            edge brain.done_handling_interruption goto Processed;
        location Processed:
            edge brain.add_emergency, brain.fix_emergency, brain.done_handling_interruption goto Processed;
            edge brain.touch_unstimulate goto Resolved;
        location Resolved:
            edge brain.fix_emergency goto EmergencyLifted;
        location EmergencyLifted:
            edge brain.done_handling_interruption goto Idle;
    end
end


group def M6(Cart_brain brain; Battery bat; DC_motor motor): // touch -> E_stop
    requirement M6_aux_1:
        alg bool battery_needs_changing = bat.battery_level.battery_empty or bat.battery_level.battery_critical;
        location Idle:
            initial;
            marked;
            edge brain.add_emergency, brain.fix_emergency, brain.done_handling_interruption goto Idle;
            edge brain.discharge goto Processing;
        location Processing:
            edge brain.add_emergency when battery_needs_changing goto EmergencyAck; //emergency acknowledged
            edge brain.done_handling_interruption when not(battery_needs_changing) goto Idle;
        location EmergencyAck:
            edge brain.done_handling_interruption goto Battery_is_in_need_of_change;
        location Battery_is_in_need_of_change:
            edge brain.add_emergency, brain.fix_emergency, brain.done_handling_interruption;
            edge brain.replace_battery goto Resolved;
        location Resolved:
            edge brain.fix_emergency goto EmergencyLifted;
        location EmergencyLifted:
            edge brain.done_handling_interruption goto Idle;
    end
end

group def M7(Cart_brain brain; DC_motor motor; Battery bat):
    requirement invariant motor.keep_track_of_direction.moving_forward and (not brain.current_location.charging or bat.battery_level.battery_full);
    requirement invariant motor.keep_track_of_direction.turning_left and (not brain.current_location.charging or bat.battery_level.battery_full);
    requirement invariant motor.keep_track_of_direction.turning_right and (not brain.current_location.charging or bat.battery_level.battery_full);
end

group def QOL(Cart_brain brain; Sensor_and_cameras sensors; DC_motor motor; Battery bat):
    alg bool no_emergency_situation = sensors.infrared_sensor.inactive and sensors.touch_sensor.inactive and
        not(bat.battery_level.battery_empty or bat.battery_level.battery_critical);

    requirement brain.start_fw needs no_emergency_situation;
    requirement brain.start_r needs no_emergency_situation;
    requirement brain.start_l needs no_emergency_situation;

    requirement brain.start_fw needs no_emergency_situation;
    requirement brain.start_r needs no_emergency_situation;
    requirement brain.start_l needs no_emergency_situation;

    requirement brain.replace_battery needs bat.battery_level.battery_empty or bat.battery_level.battery_critical;

end
