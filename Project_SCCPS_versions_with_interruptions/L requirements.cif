import "Cart model/Cart brain.cif", "Cart model/Cart communicator.cif", "PathPlanner.cif";
import "Cart model/DC motor.cif", "Cart model/Lifting_mechanism.cif";
import "Cart model/Battery.cif";

requirement def L1(Cart_brain brain):
    location permissible_storage_request:
        initial;
        marked;
        edge brain.final_location when brain.last_target_type.storage goto permissible_picking_or_storage_request;
    location permissible_picking_or_storage_request:
        marked;
        edge brain.final_location when brain.last_target_type.picking;
        edge brain.final_location when brain.last_target_type.storage goto permissible_storage_request;
end

requirement def L2(Cart_brain brain):
    location L0: initial; marked;
        edge brain.final_location when brain.last_target_type.picking goto no_rejection_yet_dont_request_storage;
        // Non-blocking:
        edge brain.request_storage;
        edge brain.denied_picking;
        edge brain.final_location when not(brain.last_target_type.picking);

    location no_rejection_yet_dont_request_storage:
        edge brain.denied_picking goto picking_location_has_been_rejected;

        // Non-blocking
        edge brain.final_location;
    location picking_location_has_been_rejected:
        edge brain.request_storage goto L0;

        edge brain.denied_picking;
        edge brain.final_location;

end

requirement def L3(Cart_brain brain; PathPlanner pp):
    location we_can_request:initial;marked;
        edge brain.request_storage, brain.request_picking, brain.request_charging;
        edge brain.granted_storage, brain.granted_picking, brain.granted_charging goto request_has_been_granted;
    location request_has_been_granted: // cannot request until completed
        edge brain.finish_executing goto we_can_request;
end

group def L4(Cart_brain brain; DC_motor motor; Lifting_mechanism lift; CartComm comms):
    requirement invariant comms.L0 or motor.keep_track_of_direction.idle;
    requirement invariant comms.L0 or not(lift.lowering or lift.lifting);

end


requirement def L5(Cart_brain brain; Battery battery):
    location permissible_request:
        initial;
        marked;
        edge brain.request_charging when (battery.battery_level.battery_empty or
            battery.battery_level.battery_critical or battery.battery_level.battery_low);
end

group def L6(Lifting_mechanism lift; PathPlanner pp):
    requirement invariant pp.execution_summary.idle or not(lift.lowering or lift.lifting);
end

requirement def L7(Cart_brain brain):
    location idle:
        initial;
        marked;
        edge brain.final_location when not brain.last_target_type.storage;
        edge brain.final_location when brain.last_target_type.storage goto at_get_rack_location;
   location at_get_rack_location:
        edge brain.start_lifting goto lifting;
    location lifting:
        edge brain.stop_lifting goto has_rack_lifted;
        edge brain.start_lifting;
    location has_rack_lifted:
        edge brain.final_location when not brain.last_target_type.storage goto pick_or_charge;
        edge brain.final_location when brain.last_target_type.storage goto at_drop_rack_location;
    location at_drop_rack_location:
        marked;
        edge brain.start_lowering goto lowering;
    location lowering:
        edge brain.stop_lowering goto idle;
        edge brain.start_lowering;
    location pick_or_charge:
        marked;
        edge brain.final_location when brain.last_target_type.storage goto at_drop_rack_location;
        edge brain.final_location when not brain.last_target_type.storage;
end
