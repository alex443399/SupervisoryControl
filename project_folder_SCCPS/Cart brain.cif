group def Cart_brain():
    // Moving variables
    controllable start_fw, start_l, start_r, stop_fw;
    uncontrollable stop_l, stop_r;

    // Lifiting event
    controllable start_lifting, start_lowering;
    uncontrollable stop_lifting, stop_lowering;

    // Barcode events
    uncontrollable on_barcode_location, off_barcode_location;
    uncontrollable on_barcode_product, off_barcode_product;

    // Communicator events
    controllable request_storage, request_picking, request_charging;
    uncontrollable granted_storage, granted_picking, granted_charging;
    uncontrollable denied_storage, denied_picking, denied_charging;
//     event touch_stimulate, infrared_stimulate, scan_production_stack_barcode;

    // charging events
    controllable start_charging, stop_charging;

    // picking events
    controllable start_picking, stop_picking;

   // location emergency or special condition:
    uncontrollable touch_stimulate, infrared_stimulate; //, scan_production_stack_barcode goto idle;// stop move
    uncontrollable battery_critical;

    //emergency over
    uncontrollable replace_battery;
    uncontrollable infrared_unstimulate, touch_unstimulate;

    // path planner events
    uncontrollable done_planning, final_location, not_final_location;
    controllable start_planning, abort_route, do_not_abort, start_executing;

    plant Emergency_handler:
        disc int[0..3] E_count = 0;// Emergency counter
        location No_emergency: initial; marked;
            edge touch_stimulate, infrared_stimulate, battery_critical do E_count := E_count + 1 goto Emergency;
        location Emergency:
            edge touch_stimulate, infrared_stimulate, battery_critical do E_count := E_count + 1;
            edge touch_unstimulate, infrared_unstimulate, replace_battery when E_count > 1
                do E_count := E_count - 1;
            edge touch_unstimulate, infrared_unstimulate, replace_battery when E_count = 1
                do E_count := E_count - 1 goto No_emergency;
    end
end
