group Cart1:
  group brain:
    controllable start_fw;
    controllable start_l;
    controllable start_r;
    controllable stop_fw;
    uncontrollable stop_l;
    uncontrollable stop_r;
    controllable start_lifting;
    controllable start_lowering;
    uncontrollable stop_lifting;
    uncontrollable stop_lowering;
    uncontrollable on_barcode_location;
    uncontrollable off_barcode_location;
    controllable request_storage;
    controllable request_picking;
    controllable request_charging;
    uncontrollable granted_storage;
    uncontrollable granted_picking;
    uncontrollable granted_charging;
    uncontrollable denied_storage;
    uncontrollable denied_picking;
    uncontrollable denied_charging;
  end
  group motor:
    plant automaton keep_track_of_direction:
      location idle:
        initial;
        marked;
        edge brain.start_fw goto moving_forward;
        edge brain.start_r goto turning_right;
        edge brain.start_l goto turning_left;
      location moving_forward:
        edge brain.stop_fw goto idle;
      location turning_right:
        edge brain.stop_r goto idle;
      location turning_left:
        edge brain.stop_l goto idle;
    end
    plant automaton keep_track_of_starts_and_stops:
      location idle:
        initial;
        marked;
        edge brain.start_fw, brain.start_l, brain.start_r goto leaving_barcode;
      location leaving_barcode:
        edge brain.off_barcode_location goto left_the_barcode;
      location left_the_barcode:
        edge brain.on_barcode_location goto reached_new_location;
      location reached_new_location:
        edge brain.stop_fw, brain.stop_l, brain.stop_r goto idle;
    end
  end
  plant automaton lift:
    location lift_down:
      initial;
      marked;
      edge brain.start_lifting goto lifting;
    location lifting:
      edge brain.stop_lifting goto lift_up;
    location lift_up:
      edge brain.start_lowering goto lowering;
    location lowering:
      edge brain.stop_lowering goto lift_down;
  end
  plant automaton location_barcode_sensor:
    location on_top_of_barcode:
      initial;
      marked;
      edge brain.off_barcode_location goto not_on_top_of_barcode;
    location not_on_top_of_barcode:
      edge brain.on_barcode_location goto on_top_of_barcode;
  end
  plant automaton comm:
    const int[5..5] max_requests = 5;
    disc int[0..5] count_store = 0;
    disc int[0..5] count_pick = 0;
    disc int[0..5] count_charge = 0;
    alg int[0..15] total_requests = count_store + count_pick + count_charge;
    alg bool can_send_requests = total_requests < max_requests;
    location communicating:
      initial;
      marked;
      edge brain.request_storage when can_send_requests do count_store := count_store + 1;
      edge brain.request_picking when can_send_requests do count_pick := count_pick + 1;
      edge brain.request_charging when can_send_requests do count_charge := count_charge + 1;
      edge brain.denied_storage when count_store > 0 do count_store := count_store - 1;
      edge brain.denied_picking when count_pick > 0 do count_pick := count_pick - 1;
      edge brain.denied_charging when count_charge > 0 do count_charge := count_charge - 1;
      edge brain.granted_storage when count_store > 0 do count_store := count_store - 1;
      edge brain.granted_picking when count_pick > 0 do count_pick := count_pick - 1;
      edge brain.granted_charging when count_charge > 0 do count_charge := count_charge - 1;
  end
  group m1:
    supervisor invariant brain.start_l needs location_barcode_sensor.on_top_of_barcode;
    supervisor invariant brain.start_r needs location_barcode_sensor.on_top_of_barcode;
    supervisor invariant brain.start_lifting needs location_barcode_sensor.on_top_of_barcode;
    supervisor invariant brain.start_lowering needs location_barcode_sensor.on_top_of_barcode;
  end
  supervisor automaton m2:
    location idle:
      initial;
      marked;
      edge brain.start_fw, brain.start_l, brain.start_r goto moving;
      edge brain.start_lifting, brain.start_lowering goto using_lifter;
    location using_lifter:
      edge brain.stop_lifting, brain.stop_lowering goto idle;
    location moving:
      edge brain.stop_fw, brain.stop_l, brain.stop_r goto idle;
  end
  supervisor automaton l3:
    location idle:
      initial;
      marked;
      edge brain.request_storage goto requesting_storage;
      edge brain.request_picking goto requesting_picking;
      edge brain.request_charging goto requesting_charging;
    location requesting_storage:
      edge brain.granted_storage, brain.denied_storage goto idle;
    location requesting_picking:
      edge brain.granted_picking, brain.denied_picking goto idle;
    location requesting_charging:
      edge brain.granted_charging, brain.denied_charging goto idle;
  end
end
group Cart2:
  group brain:
    controllable start_fw;
    controllable start_l;
    controllable start_r;
    controllable stop_fw;
    uncontrollable stop_l;
    uncontrollable stop_r;
    controllable start_lifting;
    controllable start_lowering;
    uncontrollable stop_lifting;
    uncontrollable stop_lowering;
    uncontrollable on_barcode_location;
    uncontrollable off_barcode_location;
    controllable request_storage;
    controllable request_picking;
    controllable request_charging;
    uncontrollable granted_storage;
    uncontrollable granted_picking;
    uncontrollable granted_charging;
    uncontrollable denied_storage;
    uncontrollable denied_picking;
    uncontrollable denied_charging;
  end
  group motor:
    plant automaton keep_track_of_direction:
      location idle:
        initial;
        marked;
        edge brain.start_fw goto moving_forward;
        edge brain.start_r goto turning_right;
        edge brain.start_l goto turning_left;
      location moving_forward:
        edge brain.stop_fw goto idle;
      location turning_right:
        edge brain.stop_r goto idle;
      location turning_left:
        edge brain.stop_l goto idle;
    end
    plant automaton keep_track_of_starts_and_stops:
      location idle:
        initial;
        marked;
        edge brain.start_fw, brain.start_l, brain.start_r goto leaving_barcode;
      location leaving_barcode:
        edge brain.off_barcode_location goto left_the_barcode;
      location left_the_barcode:
        edge brain.on_barcode_location goto reached_new_location;
      location reached_new_location:
        edge brain.stop_fw, brain.stop_l, brain.stop_r goto idle;
    end
  end
  plant automaton lift:
    location lift_down:
      initial;
      marked;
      edge brain.start_lifting goto lifting;
    location lifting:
      edge brain.stop_lifting goto lift_up;
    location lift_up:
      edge brain.start_lowering goto lowering;
    location lowering:
      edge brain.stop_lowering goto lift_down;
  end
  plant automaton location_barcode_sensor:
    location on_top_of_barcode:
      initial;
      marked;
      edge brain.off_barcode_location goto not_on_top_of_barcode;
    location not_on_top_of_barcode:
      edge brain.on_barcode_location goto on_top_of_barcode;
  end
  plant automaton comm:
    const int[5..5] max_requests = 5;
    disc int[0..5] count_store = 0;
    disc int[0..5] count_pick = 0;
    disc int[0..5] count_charge = 0;
    alg int[0..15] total_requests = count_store + count_pick + count_charge;
    alg bool can_send_requests = total_requests < max_requests;
    location communicating:
      initial;
      marked;
      edge brain.request_storage when can_send_requests do count_store := count_store + 1;
      edge brain.request_picking when can_send_requests do count_pick := count_pick + 1;
      edge brain.request_charging when can_send_requests do count_charge := count_charge + 1;
      edge brain.denied_storage when count_store > 0 do count_store := count_store - 1;
      edge brain.denied_picking when count_pick > 0 do count_pick := count_pick - 1;
      edge brain.denied_charging when count_charge > 0 do count_charge := count_charge - 1;
      edge brain.granted_storage when count_store > 0 do count_store := count_store - 1;
      edge brain.granted_picking when count_pick > 0 do count_pick := count_pick - 1;
      edge brain.granted_charging when count_charge > 0 do count_charge := count_charge - 1;
  end
  group m1:
    supervisor invariant brain.start_l needs location_barcode_sensor.on_top_of_barcode;
    supervisor invariant brain.start_r needs location_barcode_sensor.on_top_of_barcode;
    supervisor invariant brain.start_lifting needs location_barcode_sensor.on_top_of_barcode;
    supervisor invariant brain.start_lowering needs location_barcode_sensor.on_top_of_barcode;
  end
  supervisor automaton m2:
    location idle:
      initial;
      marked;
      edge brain.start_fw, brain.start_l, brain.start_r goto moving;
      edge brain.start_lifting, brain.start_lowering goto using_lifter;
    location using_lifter:
      edge brain.stop_lifting, brain.stop_lowering goto idle;
    location moving:
      edge brain.stop_fw, brain.stop_l, brain.stop_r goto idle;
  end
  supervisor automaton l3:
    location idle:
      initial;
      marked;
      edge brain.request_storage goto requesting_storage;
      edge brain.request_picking goto requesting_picking;
      edge brain.request_charging goto requesting_charging;
    location requesting_storage:
      edge brain.granted_storage, brain.denied_storage goto idle;
    location requesting_picking:
      edge brain.granted_picking, brain.denied_picking goto idle;
    location requesting_charging:
      edge brain.granted_charging, brain.denied_charging goto idle;
  end
end
supervisor automaton sup:
  alphabet Cart1.brain.start_fw, Cart1.brain.start_r, Cart1.brain.start_l, Cart1.brain.stop_fw, Cart1.brain.start_lifting, Cart1.brain.start_lowering, Cart1.brain.request_storage, Cart1.brain.request_picking, Cart1.brain.request_charging, Cart2.brain.start_fw, Cart2.brain.start_r, Cart2.brain.start_l, Cart2.brain.stop_fw, Cart2.brain.start_lifting, Cart2.brain.start_lowering, Cart2.brain.request_storage, Cart2.brain.request_picking, Cart2.brain.request_charging;
  location:
    initial;
    marked;
    edge Cart1.brain.request_charging when true;
    edge Cart1.brain.request_picking when true;
    edge Cart1.brain.request_storage when true;
    edge Cart1.brain.start_fw when true;
    edge Cart1.brain.start_l when true;
    edge Cart1.brain.start_lifting when true;
    edge Cart1.brain.start_lowering when true;
    edge Cart1.brain.start_r when true;
    edge Cart1.brain.stop_fw when true;
    edge Cart2.brain.request_charging when true;
    edge Cart2.brain.request_picking when true;
    edge Cart2.brain.request_storage when true;
    edge Cart2.brain.start_fw when true;
    edge Cart2.brain.start_l when true;
    edge Cart2.brain.start_lifting when true;
    edge Cart2.brain.start_lowering when true;
    edge Cart2.brain.start_r when true;
    edge Cart2.brain.stop_fw when true;
end
